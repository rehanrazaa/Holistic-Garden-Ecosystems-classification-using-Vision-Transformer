# -*- coding: utf-8 -*-
"""Labeling-folders.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZEYC5NdtdZl8fHJDYQz_wcG53ZXhC7rG
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import cv2  # OpenCV for image processing
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt

# Function to calculate the color histogram of an image
def calculate_histogram(image_path):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    hist = cv2.calcHist([image], [0, 1, 2], None, [8, 8, 8], [0, 256, 0, 256, 0, 256])
    cv2.normalize(hist, hist)
    return hist.flatten()

# Function to calculate the average histogram for a folder
def calculate_folder_histogram(folder_path):
    histograms = []
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        if filename.endswith(('.png', '.jpg', '.jpeg')):
            hist = calculate_histogram(file_path)
            histograms.append(hist)
    if histograms:
        return np.mean(histograms, axis=0)  # Average histogram for the folder
    return None

# Folder containing your image data (e.g., 7 folders with images)
dataset_path = '/content/drive/MyDrive/realData-clustered-folders'

# List of new labels to assign
new_labels =['aquatic_plants', 'clustered_flowers', 'floral_garden', 'fruits_vegetables', 'greenhouse_garden', 'wildflowers', 'woodland_trees']


# Function to assign the best label based on folder content
def assign_best_labels(dataset_path, new_labels):
    folder_histograms = {}

    # Calculate the histogram for each folder
    for folder_idx in os.listdir(dataset_path):
        folder_path = os.path.join(dataset_path, folder_idx)
        if os.path.isdir(folder_path):
            folder_histogram = calculate_folder_histogram(folder_path)
            if folder_histogram is not None:
                folder_histograms[folder_idx] = folder_histogram

    # For simplicity, we'll assign labels in order, but you could do more complex matching here
    folder_to_label = {}
    for folder_idx in folder_histograms:
        # You can match histograms with labels in different ways. Here we just assign in order.
        best_label = new_labels[int(folder_idx) % len(new_labels)]
        folder_to_label[folder_idx] = best_label

    # Print suggested labels
    for folder_idx, label in folder_to_label.items():
        print(f"Folder {folder_idx} is best matched with label '{label}'")

# Run the label assignment
assign_best_labels(dataset_path, new_labels)

# Function to assign best label based on similarity
def assign_best_label_based_on_similarity(dataset_path, new_labels, label_histograms):
    folder_histograms = {}

    # Calculate the histogram for each folder
    for folder_idx in os.listdir(dataset_path):
        folder_path = os.path.join(dataset_path, folder_idx)
        if os.path.isdir(folder_path):
            folder_histogram = calculate_folder_histogram(folder_path)
            if folder_histogram is not None:
                folder_histograms[folder_idx] = folder_histogram

    # Compare each folder's histogram to the list of label histograms
    folder_to_label = {}
    for folder_idx, folder_histogram in folder_histograms.items():
        similarities = []
        for label, label_histogram in label_histograms.items():
            similarity = cosine_similarity([folder_histogram], [label_histogram])
            similarities.append((label, similarity[0][0]))

        # Assign the label with the highest similarity
        similarities.sort(key=lambda x: x[1], reverse=True)
        folder_to_label[folder_idx] = similarities[0][0]

    # Print suggested labels
    for folder_idx, label in folder_to_label.items():
        print(f"Folder {folder_idx} is best matched with label '{label}'")

# Example: Label histograms can be predefined or calculated from reference images
label_histograms = {label: np.random.rand(512) for label in new_labels}  # Replace with actual histograms
assign_best_label_based_on_similarity(dataset_path, new_labels, label_histograms)

import csv

# Function to assign the best label and save it to a file
def save_labels_to_file(dataset_path, new_labels, output_file):
    folder_histograms = {}

    # Calculate the histogram for each folder
    for folder_idx in os.listdir(dataset_path):
        folder_path = os.path.join(dataset_path, folder_idx)
        if os.path.isdir(folder_path):
            folder_histogram = calculate_folder_histogram(folder_path)
            if folder_histogram is not None:
                folder_histograms[folder_idx] = folder_histogram

    # Save folder to label mapping in a CSV file
    with open(output_file, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Folder', 'Label'])  # Write the header
        for folder_idx in folder_histograms:
            best_label = new_labels[int(folder_idx) % len(new_labels)]
            writer.writerow([folder_idx, best_label])
            print(f"Assigned label '{best_label}' to folder '{folder_idx}'")

# Run the label saving process
output_file = '/content/drive/MyDrive/assigned_labels.csv'
save_labels_to_file(dataset_path, new_labels, output_file)

import os
import csv

# Simplified function to assign the best label and save it to a file
def save_labels_to_file(dataset_path, new_labels, output_file):
    folder_list = [folder for folder in os.listdir(dataset_path) if os.path.isdir(os.path.join(dataset_path, folder))]

    # Save folder to label mapping in a CSV file
    with open(output_file, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Folder', 'Label'])  # Write the header

        # Assign labels based on folder index
        for idx, folder in enumerate(folder_list):
            best_label = new_labels[idx % len(new_labels)]  # Assign label based on the index
            writer.writerow([folder, best_label])
            print(f"Assigned label '{best_label}' to folder '{folder}'")

# Example usage
dataset_path = '/content/drive/MyDrive/realData-clustered-folders'  # Path to the folder containing your image folders
new_labels =['aquatic_plants', 'clustered_flowers', 'floral_garden', 'fruits_vegetables', 'greenhouse_garden', 'wildflowers', 'woodland_trees']

 # List of new labels
output_file = '/content/drive/MyDrive/assigned_labels.csv'

# Run the label saving process
save_labels_to_file(dataset_path, new_labels, output_file)

print("Labels saved to CSV successfully!")

"""#woodland trees cluster 3
#aquatic plants  cluster 5
#clustered flowers cluster 0
#floral garden cluster 1
"""



# Path to the directory where cluster folders are stored
##dataset_path = '/content/drive/MyDrive/all-clustered-folders'
cluster_base_dir = '/content/drive/MyDrive/all-clustered-folders'

# Get the list of cluster folders
cluster_folders = [f for f in os.listdir(cluster_base_dir) if os.path.isdir(os.path.join(cluster_base_dir, f))]

# Print the number of images in each cluster folder
for cluster_folder in sorted(cluster_folders):
    cluster_path = os.path.join(cluster_base_dir, cluster_folder)
    num_images = len([f for f in os.listdir(cluster_path) if f.endswith(('.png', '.jpg', '.jpeg'))])
    print(f'Cluster {cluster_folder}: {num_images} images')